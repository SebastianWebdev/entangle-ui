name: Deploy Storybook and Landing Page

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'public/**'
      - '.github/workflows/**'
  
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Storybook
        run: npm run build-storybook
        env:
          NODE_ENV: production
      
      - name: Create deployment structure
        run: |
          # Create the deployment directory
          mkdir -p deploy
          
          # Copy the landing page to root
          if [ -f "public/index.html" ]; then
            cp public/index.html deploy/index.html
            echo "‚úÖ Copied landing page"
          else
            echo "‚ö†Ô∏è  No landing page found, creating from paste.txt"
            # If paste.txt exists, use it as index.html
            if [ -f "paste.txt" ]; then
              cp paste.txt deploy/index.html
            fi
          fi
          
          # Copy any other public assets
          if [ -d "public" ]; then
            # Copy all files except index.html (already copied)
            find public -type f -not -name "index.html" -exec cp {} deploy/ \;
          fi
          
          # Move storybook build to /storybook subdirectory
          if [ -d "storybook-static" ]; then
            mv storybook-static deploy/storybook
            echo "‚úÖ Moved Storybook to /storybook/"
          else
            echo "‚ùå Storybook build not found"
            exit 1
          fi
          
          # Create a .nojekyll file to prevent GitHub Pages Jekyll processing
          touch deploy/.nojekyll
          
          # Verify the structure
          echo "üìÅ Final deployment structure:"
          find deploy -type f | head -20
          
          # Check that both key files exist
          if [ -f "deploy/index.html" ] && [ -f "deploy/storybook/index.html" ]; then
            echo "‚úÖ Both landing page and Storybook are ready"
          else
            echo "‚ùå Missing required files"
            exit 1
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './deploy'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4